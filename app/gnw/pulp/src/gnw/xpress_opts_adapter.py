import string

from gnw.com.util import err_value 
from gnw.util import isstring, isint, isfloat

class XpressOptsAdapter( object ):

	opt_control_dict = \
	{	'EXTRAROWS' : (8004, int, isint),
		'EXTRACOLS' : (8005, int, isint),
		'EXTRAELEMS' : (8006, int, isint),
		'LPITERLIMIT' : (8007, int, isint),
		'LPLOG' : (8009, int, isint),
		'SCALING' : (8010, int, isint),
		'PRESOLVE' : (8011, int, isint),
		'CRASH' : (8012, int, isint),
		'PRICINGALG' : (8013, int, isint),
		'INVERTFREQ' : (8014, int, isint),
		'INVERTMIN' : (8015, int, isint),
		'MAXNODE' : (8018, int, isint),
		'MAXTIME' : (8020, int, isint),
		'MAXMIPSOL' : (8021, int, isint),
		'KEEPMIPSOL' : (8022, int, isint),
		'DEFAULTALG' : (8023, int, isint),
		'VARSELECTION' : (8025, int, isint),
		'NODESELECTION' : (8026, int, isint),
		'BACKTRACK' : (8027, int, isint),
		'MIPLOG' : (8028, int, isint),
		'KEEPNROWS' : (8030, int, isint),
		'MPSECHO' : (8032, int, isint),
		'MAXPAGELINES' : (8034, int, isint),
		'OUTPUTLOG' : (8035, int, isint),
		'EXTRAPRESOLVE' : (8037, int, isint),
		'CACHESIZE' : (8043, int, isint),
		'CROSSOVER' : (8044, int, isint),
		'BARITERLIMIT' : (8045, int, isint),
		'CHOLESKYALG' : (8046, int, isint),
		'BAROUTPUT' : (8047, int, isint),
		'CSTYLE' : (8050, int, isint),
		'EXTRAMIPENTS' : (8051, int, isint),
		'REFACTOR' : (8052, int, isint),
		'BARTHREADS' : (8053, int, isint),
		'KEEPBASIS' : (8054, int, isint),
		'VERSION' : (8061, int, isint),
		'BIGMMETHOD' : (8068, int, isint),
		'MPSNAMELENGTH' : (8071, int, isint),
		'SOLUTIONFILE' : (8072, int, isint),
		'PRESOLVEOPS' : (8077, int, isint),
		'MIPPRESOLVE' : (8078, int, isint),
		'MIPTHREADS' : (8079, int, isint),
		'BARORDER' : (8080, int, isint),
		'BREADTHFIRST' : (8082, int, isint),
		'AUTOPERTURB' : (8084, int, isint),
		'DENSECOLLIMIT' : (8086, int, isint),
		'CUTFREQ' : (8116, int, isint),
		'TRACE' : (8130, int, isint),
		'MAXIIS' : (8131, int, isint),
		'CPUTIME' : (8133, int, isint),
		'COVERCUTS' : (8134, int, isint),
		'GOMCUTS' : (8135, int, isint),
		'MPSFORMAT' : (8137, int, isint),
		'CUTSTRATEGY' : (8138, int, isint),
		'CUTDEPTH' : (8139, int, isint),
		'TREECOVERCUTS' : (8140, int, isint),
		'TREEGOMCUTS' : (8141, int, isint),
		'CUTSELECT' : (8142, int, isint),
		'TREECUTSELECT' : (8143, int, isint),
		'DUALIZE' : (8144, int, isint),
		'DUALGRADIENT' : (8145, int, isint),
		'SBITERLIMIT' : (8146, int, isint),
		'SBBEST' : (8147, int, isint),
		'MAXCUTTIME' : (8149, int, isint),
		'ACTIVESET' : (8152, int, isint),
		'BARINDEFLIMIT' : (8153, int, isint),
		'HEURSTRATEGY' : (8154, int, isint),
		'HEURFREQ' : (8155, int, isint),
		'HEURDEPTH' : (8156, int, isint),
		'HEURMAXSOL' : (8157, int, isint),
		'HEURNODES' : (8158, int, isint),
		'LNPBEST' : (8160, int, isint),
		'LNPITERLIMIT' : (8161, int, isint),
		'BRANCHCHOICE' : (8162, int, isint),
		'SBSELECT' : (8164, int, isint),
		'LOCALCHOICE' : (8170, int, isint),
		'DUALSTRATEGY' : (8174, int, isint),
		'L1CACHE' : (8175, int, isint),
		'HEURDIVESTRATEGY' : (8177, int, isint),
		'HEURSELECT' : (8178, int, isint),
		'SHAREMATRIX' : (8186, int, isint),
		'EXTRASETS' : (8190, int, isint),
		'EXTRASETELEMS' : (8191, int, isint),
		'FEASIBILITYPUMP' : (8193, int, isint),
		'HEURSEARCHFREQ' : (8196, int, isint),
		'HEURDIVESPEEDUP' : (8197, int, isint),
		'SBESTIMATE' : (8198, int, isint),
		'LINELENGTH' : (8209, int, isint),
		'MUTEXCALLBACKS' : (8210, int, isint),
		'BARCRASH' : (8211, int, isint),
		'HEURSEARCHROOTSELECT' : (8216, int, isint),
		'HEURSEARCHTREESELECT' : (8217, int, isint),
		'MPS18COMPATIBLE' : (8223, int, isint),
		'ROOTPRESOLVE' : (8224, int, isint),
		'CROSSOVERDRP' : (8227, int, isint),
		'FORCEOUTPUT' : (8229, int, isint),
		'DETERMINISTIC' : (8232, int, isint),
		'COLFIXBRANCH' : (8234, int, isint),
		'PREPROBING' : (8238, int, isint),
		'EXTRAQCELEMENTS' : (8240, int, isint),
		'EXTRAQCROWS' : (8241, int, isint),
		'TEMPBOUNDS' : (8250, int, isint),
		'IFCHECKCONVEXITY' : (8251, int, isint),
		'PRIMALUNSHIFT' : (8252, int, isint),
		'ROWS' : (1001, int, isint),
		'SETS' : (1004, int, isint),
		'SETMEMBERS' : (1005, int, isint),
		'ELEMS' : (1006, int, isint),
		'PRIMALINFEAS' : (1007, int, isint),
		'DUALINFEAS' : (1008, int, isint),
		'SIMPLEXITER' : (1009, int, isint),
		'LPSTATUS' : (1010, int, isint),
		'MIPSTATUS' : (1011, int, isint),
		'CUTS' : (1012, int, isint),
		'NODES' : (1013, int, isint),
		'NODEDEPTH' : (1014, int, isint),
		'ACTIVENODES' : (1015, int, isint),
		'MIPSOLNODE' : (1016, int, isint),
		'MIPSOLS' : (1017, int, isint),
		'COLS' : (1018, int, isint),
		'SPAREROWS' : (1019, int, isint),
		'SPARECOLS' : (1020, int, isint),
		'SPAREELEMS' : (1021, int, isint),
		'SPAREMIPENTS' : (1022, int, isint),
		'ERRORCODE' : (1023, int, isint),
		'MIPINFEAS' : (1024, int, isint),
		'PRESOLVESTATE' : (1026, int, isint),
		'PARENTNODE' : (1027, int, isint),
		'NAMELENGTH' : (1028, int, isint),
		'QELEMS' : (1030, int, isint),
		'NUMIIS' : (1031, int, isint),
		'MIPENTS' : (1032, int, isint),
		'BRANCHVAR' : (1036, int, isint),
		'MIPTHREADID' : (1037, int, isint),
		'ORIGINALROWS' : (1124, int, isint),
		'STOPSTATUS' : (1179, int, isint),
		'SPARESETS' : (1203, int, isint),
		'SPARESETELEMS' : (1204, int, isint),
		'ORIGINALCOLS' : (1214, int, isint),
		'QCELEMS' : (1232, int, isint),
		'QCONSTRAINTS' : (1234, int, isint),
		'NLPHESSIANELEMS' : (1243, int, isint),
		'MATRIXTOL' : (7001, float, isfloat),
		'PIVOTTOL' : (7002, float, isfloat),
		'FEASTOL' : (7003, float, isfloat),
		'OUTPUTTOL' : (7004, float, isfloat),
		'SOSREFTOL' : (7005, float, isfloat),
		'OPTIMALITYTOL' : (7006, float, isfloat),
		'ETATOL' : (7007, float, isfloat),
		'RELPIVOTTOL' : (7008, float, isfloat),
		'MIPTOL' : (7009, float, isfloat),
		'DEGRADEFACTOR' : (7010, float, isfloat),
		'MIPTARGET' : (7011, float, isfloat),
		'MIPADDCUTOFF' : (7012, float, isfloat),
		'MIPABSCUTOFF' : (7013, float, isfloat),
		'MIPRELCUTOFF' : (7014, float, isfloat),
		'PSEUDOCOST' : (7015, float, isfloat),
		'PENALTY' : (7016, float, isfloat),
		'BIGM' : (7018, float, isfloat),
		'MIPABSSTOP' : (7019, float, isfloat),
		'MIPRELSTOP' : (7020, float, isfloat),
		'CHOLESKYTOL' : (7032, float, isfloat),
		'BARGAPSTOP' : (7033, float, isfloat),
		'BARDUALSTOP' : (7034, float, isfloat),
		'BARPRIMALSTOP' : (7035, float, isfloat),
		'BARSTEPSTOP' : (7036, float, isfloat),
		'ELIMTOL' : (7042, float, isfloat),
		'PERTURB' : (7044, float, isfloat),
		'MARKOWITZTOL' : (7047, float, isfloat),
		'PPFACTOR' : (7069, float, isfloat),
		'SBEFFORT' : (7086, float, isfloat),
		'HEURSEARCHEFFORT' : (7090, float, isfloat),
		'CUTFACTOR' : (7091, float, isfloat),
		'EIGENVALUETOL' : (7097, float, isfloat),
		'LPOBJVAL' : (2001, float, isfloat),
		'SUMPRIMALINF' : (2002, float, isfloat),
		'MIPOBJVAL' : (2003, float, isfloat),
		'BESTBOUND' : (2004, float, isfloat),
		'OBJRHS' : (2005, float, isfloat),
		'OBJSENSE' : (2008, float, isfloat),
		'BRANCHVALUE' : (2009, float, isfloat),
		'PENALTYVALUE' : (2061, float, isfloat),
		'CURRMIPCUTOFF' : (2062, float, isfloat),
		'MPSRHSNAME' : (6001, str, isstring),
		'MPSOBJNAME' : (6002, str, isstring),
		'MPSRANGENAME' : (6003, str, isstring),
		'MPSBOUNDNAME' : (6004, str, isstring),
		'OUTPUTMASK' : (6005, str, isstring),
		'MATRIXNAME' : (3001, str, isstring),
		'BOUNDNAME' : (3002, str, isstring),
		'OBJNAME' : (3003, str, isstring),
		'RHSNAME' : (3004, str, isstring),
		'RANGENAME' : (3005, str, isstring),
		'BARPRIMALOBJ' : (4001, float, isfloat),
		'BARDUALOBJ' : (4002, float, isfloat),
		'BARPRIMALINF' : (4003, float, isfloat),
		'BARDUALINF' : (4004, float, isfloat),
		'BARSTOP' : (4005, float, isfloat),
		'BARITER' : (5001, int, isint),
		'BARAASIZE' : (5002, int, isint),
		'BARLSIZE' : (5003, int, isint),
		'BARDENSECOL' : (5004, int, isint),
		'BARCROSSOVER' : (5005, int, isint),
		'MSP_DUPLICATESOLUTIONSPOLICY' : (6203, int, isint),
		'MSP_SOLUTIONS' : (6208, int, isint),
		'MSP_DEFAULTUSERSOLFEASTOL' : (6209, float, isfloat),
		'MSP_DEFAULTUSERSOLMIPTOL' : (6210, float, isfloat),
		'MSP_INCLUDEPROBNAMEINLOGGING' : (6211, int, isint),
		'MSP_WRITESLXSOLLOGGING' : (6212, int, isint),
		'MSP_PRB_VALIDSOLS' : (6300, int, isint),
		'MSP_PRB_FEASIBLESOLS' : (6301, int, isint),
		'MSP_SOL_COLS' : (6400, int, isint),
		'MSP_SOL_NONZEROS' : (6401, int, isint),
		'MSP_SOL_FEASTOL' : (6402, float, isfloat),
		'MSP_SOL_MIPTOL' : (6403, float, isfloat),
		'MSP_SOL_ISUSERSOLUTION' : (6404, int, isint),
		'MSP_SOL_ISREPROCESSEDUSERSOLUTION' : (6405, int, isint),
		'MSP_SOL_BITFIELDSUSR' : (6406, int, isint),
		'MSP_SOL_BITFIELDSSYS' : (6407, int, isint),
		'MSP_SOLPRB_OBJ' : (6500, float, isfloat),
		'MSP_SOLPRB_INFEASCOUNT' : (6501, int, isint),
		'MSP_SOLPRB_INFSUM_PRIMAL' : (6502, float, isfloat),
		'MSP_SOLPRB_INFCNT_PRIMAL' : (6503, int, isint),
		'MSP_SOLPRB_INFSUM_MIP' : (6504, float, isfloat),
		'MSP_SOLPRB_INFCNT_MIP' : (6505, int, isint),
		'MSP_SOLPRB_INFSUM_SLACK' : (6506, float, isfloat),
		'MSP_SOLPRB_INFCNT_SLACK' : (6507, int, isint),
		'MSP_SOLPRB_INFMAX_SLACK' : (6508, float, isfloat),
		'MSP_SOLPRB_INFMXI_SLACK' : (6509, int, isint),
		'MSP_SOLPRB_INFSUM_COLUMN' : (6510, float, isfloat),
		'MSP_SOLPRB_INFCNT_COLUMN' : (6511, int, isint),
		'MSP_SOLPRB_INFMAX_COLUMN' : (6512, float, isfloat),
		'MSP_SOLPRB_INFMXI_COLUMN' : (6513, int, isint),
		'MSP_SOLPRB_INFSUM_DELAYEDROW' : (6514, float, isfloat),
		'MSP_SOLPRB_INFCNT_DELAYEDROW' : (6515, int, isint),
		'MSP_SOLPRB_INFMAX_DELAYEDROW' : (6516, float, isfloat),
		'MSP_SOLPRB_INFMXI_DELAYEDROW' : (6517, int, isint),
		'MSP_SOLPRB_INFSUM_INT' : (6518, float, isfloat),
		'MSP_SOLPRB_INFCNT_INT' : (6519, int, isint),
		'MSP_SOLPRB_INFMAX_INT' : (6520, float, isfloat),
		'MSP_SOLPRB_INFMXI_INT' : (6521, int, isint),
		'MSP_SOLPRB_INFSUM_BIN' : (6522, float, isfloat),
		'MSP_SOLPRB_INFCNT_BIN' : (6523, int, isint),
		'MSP_SOLPRB_INFMAX_BIN' : (6524, float, isfloat),
		'MSP_SOLPRB_INFMXI_BIN' : (6525, int, isint),
		'MSP_SOLPRB_INFSUM_SC' : (6526, float, isfloat),
		'MSP_SOLPRB_INFCNT_SC' : (6527, int, isint),
		'MSP_SOLPRB_INFMAX_SC' : (6528, float, isfloat),
		'MSP_SOLPRB_INFMXI_SC' : (6529, int, isint),
		'MSP_SOLPRB_INFSUM_SI' : (6530, float, isfloat),
		'MSP_SOLPRB_INFCNT_SI' : (6531, int, isint),
		'MSP_SOLPRB_INFMAX_SI' : (6532, float, isfloat),
		'MSP_SOLPRB_INFMXI_SI' : (6533, int, isint),
		'MSP_SOLPRB_INFSUM_PI' : (6534, float, isfloat),
		'MSP_SOLPRB_INFCNT_PI' : (6535, int, isint),
		'MSP_SOLPRB_INFMAX_PI' : (6536, float, isfloat),
		'MSP_SOLPRB_INFMXI_PI' : (6537, int, isint),
		'MSP_SOLPRB_INFSUM_SET1' : (6538, float, isfloat),
		'MSP_SOLPRB_INFCNT_SET1' : (6539, int, isint),
		'MSP_SOLPRB_INFMAX_SET1' : (6540, float, isfloat),
		'MSP_SOLPRB_INFMXI_SET1' : (6541, int, isint),
		'MSP_SOLPRB_INFSUM_SET2' : (6542, float, isfloat),
		'MSP_SOLPRB_INFCNT_SET2' : (6543, int, isint),
		'MSP_SOLPRB_INFMAX_SET2' : (6544, float, isfloat),
		'MSP_SOLPRB_INFMXI_SET2' : (6545, int, isint),
		'MSE_SOLUTIONS' : (6600, int, isint),
		'MSE_CALLBACKCULLSOLS_MIPOBJECT' : (6601, int, isint),
		'MSE_CALLBACKCULLSOLS_DIVERSITY' : (6602, int, isint),
		'MSE_CALLBACKCULLSOLS_MODOBJECT' : (6603, int, isint),
		'MSE_METRIC_MIPOBJECT' : (6604, int, isint),
		'MSE_METRIC_DIVERSITY' : (6605, int, isint),
		'MSE_METRIC_MODOBJECT' : (6606, int, isint),
		'MSE_OPTIMIZEDIVERSITY' : (6607, int, isint),
		'MSE_DIVERSITYSUM' : (6608, float, isfloat),
		'MSE_OUTPUTTOL' : (6609, float, isfloat)
	}

	def get_opt_control_string(options_dict={}, pedantic=True):
		result = ""
		for k,v in options_dict.iteritems():
			key = string.upper( str( k ) )
			if key not in XpressOptsAdapter.opt_control_dict:
				if pedantic:
					raise KeyError, "unknown Xpress '%s' parameter" % key
				else:
					continue
				
			control = XpressOptsAdapter.opt_control_dict[key][0].__str__()
			
			if pedantic:
				if not isinstance( v, XpressOptsAdapter.opt_control_dict[key][1] ):
					raise TypeError, "wrong value type for Xpress '%s' parameter. Got %s. Expect %s" % (key, type( v ), XpressOptsAdapter.opt_control_dict[key][1]) 

			if issubclass( XpressOptsAdapter.opt_control_dict[key][1], int ):
				value = int( v ).__str__()
			elif issubclass( XpressOptsAdapter.opt_control_dict[key][1], float ):
				value = float( v ).__str__()
			else:
				value = str( v ).__str__()
				
			if len( result ):
				result += ";"
				
			result += "%s=%s" % (control,value)

		return result
	
	get_opt_control_string = staticmethod( get_opt_control_string )


if __name__ == "__main__":
	print "gnw.xpress_opts_adapter.py"
	
	options_dict = \
	{ 'MIPRelCutoff' : 1.0e-6,
	  'MipTol' : 5.0e-4,
	  'MaxTime' : 0,
	  'PivotTol' : 1.0e-10,
	  'FeasTol' : 1.0e-6,
	  'Presolve' : -1,
	  'Scaling' : 163.0 }

	print "non-pedantic:",
	print XpressOptsAdapter.get_opt_control_string( options_dict, False )
	
	try:
		print "pedantic:",
		print XpressOptsAdapter.get_opt_control_string( options_dict, True )
	except KeyError:
		print "KeyError:", err_value()
	except TypeError:
		print "TypeError:", err_value()
	except:
		print err_value()
		
		

